import axios, { type AxiosResponseHeaders, type AxiosResponse } from "axios";
import { type Alert, AlertLevel, VERSION, type OAuthLoginRequest, type APIResponse, errors } from "trafficops-types";

import { about, systemInfo } from "./about.js";
import { APIError } from "./api.error.js";

/**
 * A Traffic Ops API client. Instances of this class have a method for every
 * operation one could want to perform using the Traffic Ops API. For details,
 * refer to the [official TO API documentation](https://traffic-control-cdn.readthedocs.io/en/latest/api/index.html).
 */
export class Client extends axios.Axios {
	public readonly version = VERSION;

	public readonly baseURL: URL;
	private readonly logAlerts: boolean;
	private readonly raiseErrorAlerts: boolean;

	private cookie: string | null = null;

	/**
	 * Tells whether or not the client is authenticated with Traffic Ops.
	 * This just tells you that the client has authenticated; the credentials
	 * could have expired since then.
	 */
	public get loggedIn(): boolean {
		return this.cookie !== null;
	}

	/**
	 * The mojolicious cookie that can be used to authenticate with Traffic Ops.
	 * Accessing this throws an error if `loggedIn` is `false`.
	 */
	protected get authCookie(): string {
		if (this.cookie === null) {
			throw new APIError("not authenticated");
		}
		return this.cookie;
	}

	constructor(trafficOpsURL: URL | string, options = {logAlerts: false, raiseErrorAlerts: true}) {
		super({transformRequest: [(data: object): string => JSON.stringify(data)], transformResponse: [(x: string): object =>JSON.parse(x)]});
		this.logAlerts = options.logAlerts;
		this.raiseErrorAlerts = options.raiseErrorAlerts;
		if (trafficOpsURL instanceof URL) {
			this.baseURL = trafficOpsURL;
		} else {
			try {
				this.baseURL = new URL(trafficOpsURL);
			} catch (e) {
				const msg = e instanceof Error ? e.message : String(e);
				throw new Error(`invalid Traffic Ops URL: ${msg}`);
			}
		}
		if (this.baseURL.pathname !== "/") {
			throw new Error(`the Traffic Ops URL must be only the server's root URL; path specified: '${this.baseURL.pathname}'`);
		}
	}

	/**
	 * Makes a GET request to the Traffic Ops API.
	 *
	 * @param path The path to request - do **not** include `/api` or the API
	 * version, this method will handle that for you.
	 * @returns The server's response. Note that error responses are returned,
	 * not thrown, but connection and transport layer errors (e.g. TCP dial
	 * failure) are thrown.
	 */
	public async apiGet<T>(path: string): Promise<AxiosResponse<T>> {
		const url = this.makeURL(path);
		// eslint-disable-next-line @typescript-eslint/naming-convention
		return this.request<T>({headers: {"Cookie": this.authCookie}, method: "GET", url});
	}

	/**
	 * Creates a full request URL from the given request path and the client's
	 * `baseURL` and `version`.
	 *
	 * @example
	 * const url = (new Client("https://trafficops.infra.ciab.test/")).makeURL("/servers");
	 * console.log(url);
	 * // Output: https://trafficops.infra.ciab.test/api/3.1/servers
	 * // (assuming this client uses API version 3.1)
	 *
	 * @param path The API version-independent path to the requested API
	 * endpoint e.g. `/servers` as opposed to `/api/0.0/servers`.
	 * @returns A full request URL.
	 */
	private makeURL(path: string): string {
		path = path.replace(/^\/+/, "");
		return `${this.baseURL}api/${this.version}/${path}`;
	}

	/**
	 * Handles Alerts returned by Traffic Ops. This will log them if the client
	 * is set to log Alerts, and will throw an {@link APIError} if the client is
	 * is configured to throw error-level Alerts as errors and any error-level
	 * alerts are found.
	 *
	 * @param as The returned Alerts.
	 * @param code Optionally, the HTTP response status code.
	 * @param headers Optionally, the response HTTP headers.
	 * @throws {APIError} if the client is configured to throw error-level
	 * Alerts as errors and `as` contains at least one error-level alert.
	 */
	protected handleAlerts(as: Array<Alert> | undefined, code?: number, headers?: AxiosResponseHeaders): void {
		if (!as || as.length < 1) {
			return;
		}
		if (this.logAlerts) {
			for (const a of as) {
				switch (a.level) {
					case AlertLevel.ERROR:
						console.error(a.text);
						break;
					case AlertLevel.WARNING:
						console.warn(a.text);
						break;
					case AlertLevel.INFO:
						console.info(a.text);
						break;
					default:
						console.log(a.text);
				}
			}
		}
		if (this.raiseErrorAlerts && errors(as).length > 0) {
			throw new APIError(as, code, headers);
		}
	}

	/**
	 * Log in using an authentication token generated by Traffic Ops (typically
	 * for first-time account setup).
	 *
	 * @param token The authentication token.
	 */
	public async login(token: string): Promise<void>;
	/**
	 * Log in using oauth.
	 *
	 * @param oauth The information used to authenticate with Traffic Ops
	 * through OAuth.
	 */
	public async login(oauth: OAuthLoginRequest): Promise<void>;
	/**
	 * Log in using a traditional username/password pair.
	 *
	 * @param username The username of the user as whom to authenticate.
	 * @param password The password of the user identified by `username`.
	 */
	public async login(username: string, password: string): Promise<void>;
	/**
	 * Log in to the Traffic Ops API. Supports all three authentication methods
	 * provided by Traffic Ops.
	 *
	 * @param tou Either the token for token logins, OAuth connection and
	 * authentication information, or a username for username/password log ins.
	 * If this is a string, it's treated as a token unless `password` is given.
	 * @param password The password to use when authenticating using a
	 * username/password pair. This is ignored if `tou` is determined to be
	 * OAuth information.
	 */
	public async login(tou: string | OAuthLoginRequest, password?: string): Promise<void> {
		let resp;
		const opts = {transformRequest: [(data: object): string =>JSON.stringify(data)]};
		if (typeof tou === "string") {
			if (password !== undefined) {
				resp = await this.post<APIResponse<undefined>>(this.makeURL("user/login"), {p: password, u: tou}, opts);
			} else {
				resp = await this.post<APIResponse<undefined>>(this.makeURL("user/login/token"), {t: tou});
			}
		} else {
			resp = await this.post<APIResponse<undefined>>(this.makeURL("user/login/oauth"), tou);
		}
		this.handleAlerts(resp.data.alerts, resp.status, resp.headers);
		const cookie = (resp.headers["set-cookie"] ?? []).find(c=>c.startsWith("mojolicious="));
		if (!cookie) {
			throw new APIError("Traffic Ops did not set the mojolicious authentication cookie in login response", resp.status, resp.headers);
		}
		this.cookie = cookie;
	}

	public about = about;
	public systemInfo = systemInfo;
}
